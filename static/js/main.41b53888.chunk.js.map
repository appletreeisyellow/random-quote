{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["colors","App","props","getRandomQuoteIndex","quotes","length","Math","floor","random","handleClick","i","state","colorI","color","text","quote","author","setState","fading","timer","setTimeout","_","this","fetchQuote","a","fetch","response","ok","Error","status","json","data","console","log","fadingClassName","document","body","style","background","id","className","borderColor","backgroundColor","onClick","href","target","rel","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"kRAKMA,EAAS,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGIC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAoCRC,oBAAsB,SAACC,GAErB,IAAMC,EAASD,EAAOC,OAGtB,OADoBC,KAAKC,MAAMD,KAAKE,SAAWH,IAzC9B,EA6CnBI,YAAc,WAEZ,IAAMC,EAAI,EAAKP,oBAAoB,EAAKQ,MAAMP,QAExCQ,EAASN,KAAKC,MAAMD,KAAKE,SAAWR,EAAOK,QAC3CQ,EAAQb,EAAOY,GAEfE,EAAO,EAAKH,MAAMP,OAAOM,GAAK,EAAKC,MAAMP,OAAOM,GAAGK,MAAQ,GAC3DC,EAAS,EAAKL,MAAMP,OAAOM,GAAK,EAAKC,MAAMP,OAAOM,GAAGM,OAAS,GACpE,EAAKC,SAAS,CACZJ,QACAK,QAAQ,IAEV,EAAKC,MAAQC,YAAW,SAAAC,GACtB,EAAKJ,SAAS,CACZH,OACAE,SACAE,QAAQ,MAET,MA9DH,EAAKP,MAAQ,CACXP,OAAQ,GACRU,KAAM,GACNE,OAAQ,GACRH,MAAOb,EAAO,GACdkB,QAAQ,GAPO,E,qDAWnB,WACEI,KAAKC,e,+DAGP,oCAAAC,EAAA,+EAE2BC,MAnCX,0IAiChB,WAEUC,EAFV,QAGkBC,GAHlB,sBAKY,IAAIC,MAAJ,uBAA0BF,EAASG,SAL/C,uBAOuBH,EAASI,OAPhC,OAOUC,EAPV,OASUrB,EAAIY,KAAKnB,oBAAoB4B,EAAK3B,QAClCU,EAAOiB,EAAK3B,OAAOM,GAAKqB,EAAK3B,OAAOM,GAAGK,MAAQ,GAC/CC,EAASe,EAAK3B,OAAOM,GAAKqB,EAAK3B,OAAOM,GAAGM,OAAS,GACxDM,KAAKL,SAAS,CACZb,OAAQ2B,EAAK3B,OACbU,OACAE,WAfN,kDAkBIgB,QAAQC,IAAR,MAlBJ,0D,0EAoDA,WACE,IAAMpB,EAAQS,KAAKX,MAAME,MACnBqB,EAAkBZ,KAAKX,MAAMO,OAAS,UAAY,SAExD,OADAiB,SAASC,KAAKC,MAAMC,WAAahB,KAAKX,MAAME,MAE1C,sBAAK0B,GAAG,sBAAR,UACE,sBAAKA,GAAG,YAAR,UACE,mBAAGA,GAAG,aAAaC,UAAU,mBAAmBH,MAAO,CAACxB,WACxD,qBAAK0B,GAAG,iBAAR,SACE,mBAAGA,GAAG,OACJF,MAAO,CAACxB,SACR2B,UAAWN,EAFb,SAGGZ,KAAKX,MAAMG,SAGhB,oBAAGyB,GAAG,SACJF,MAAO,CAACxB,SACR2B,UAAWN,EAFb,eAGKZ,KAAKX,MAAMK,UAEhB,wBACEuB,GAAG,YACHF,MAAO,CACLI,YAAa5B,EACb6B,gBAAiB7B,GAEnB8B,QAASrB,KAAKb,YANhB,uBASA,mBACE8B,GAAG,cACHK,KAAK,2BACLC,OAAO,SAHT,4BAOF,sBAAKN,GAAG,SAAR,gBACO,mBACDK,KAAK,8BACLC,OAAO,SACPC,IAAI,aAHH,gC,GAzGGC,IAAMC,WAmHT/C,IC3HAgD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzB,SAAS0B,eAAe,SAM1BZ,M","file":"static/js/main.41b53888.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nconst quote_url = 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json'\n\nconst colors = [\n  '#16a085',\n  '#27ae60',\n  '#2c3e50',\n  '#f39c12',\n  '#e74c3c',\n  '#9b59b6',\n  '#FB6964',\n  '#342224',\n  '#472E32',\n  '#BDBB99',\n  '#77B1A9',\n  '#73A857'\n]\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotes: [],\n      text: '',\n      author: '',\n      color: colors[0],\n      fading: false, // to animate text change transition\n    }\n  }\n\n  componentDidMount() {\n    this.fetchQuote()\n  }\n  \n  async fetchQuote() {\n    try {\n      const response = await fetch(quote_url);\n      if (!response.ok) {\n        // error\n        throw new Error(`HTTP status: ${response.status}`);\n      }\n      const data = await response.json();\n      // initialize first random quote\n      const i = this.getRandomQuoteIndex(data.quotes);\n      const text = data.quotes[i] ? data.quotes[i].quote : \"\";\n      const author = data.quotes[i] ? data.quotes[i].author : \"\";\n      this.setState({\n        quotes: data.quotes,\n        text,\n        author,\n      })\n    } catch(e) {\n      console.log(e);\n    }\n  }\n  \n  getRandomQuoteIndex = (quotes) => {\n    // generate random number\n    const length = quotes.length;\n    // randomIndex range from 0 to the length of quotes\n    const randomIndex = Math.floor(Math.random() * length);\n    return randomIndex\n  }\n  \n  handleClick = () => {\n    // generate a random index for quote\n    const i = this.getRandomQuoteIndex(this.state.quotes);\n    // generate a random index for color\n    const colorI = Math.floor(Math.random() * colors.length)\n    const color = colors[colorI];\n    // set the text and author at this random index\n    const text = this.state.quotes[i] ? this.state.quotes[i].quote : \"\";\n    const author = this.state.quotes[i] ? this.state.quotes[i].author : \"\";\n    this.setState({\n      color,\n      fading: true, // fade out\n    });\n    this.timer = setTimeout(_ => {\n      this.setState({\n        text,\n        author,\n        fading: false, // fade back in\n      });\n    }, 500); // animation timing offset\n  }\n\n  render() {\n    const color = this.state.color;\n    const fadingClassName = this.state.fading ? 'fadeout' : 'fadein';\n    document.body.style.background = this.state.color;\n    return (\n      <div id=\"quote-box-container\">\n        <div id=\"quote-box\">\n          <i id=\"quote-sign\" className=\"fa fa-quote-left\" style={{color}}></i>\n          <div id=\"text-container\">\n            <p id=\"text\"\n              style={{color}}\n              className={fadingClassName}>\n              {this.state.text}\n            </p>\n          </div>\n          <p id=\"author\"\n            style={{color}}\n            className={fadingClassName}>\n            - {this.state.author}\n          </p>\n          <button\n            id=\"new-quote\"\n            style={{\n              borderColor: color,\n              backgroundColor: color\n            }}\n            onClick={this.handleClick}>\n            New Quote\n          </button>\n          <a\n            id=\"tweet-quote\"\n            href=\"twitter.com/intent/tweet\"\n            target=\"_blank\">\n            Tweet quote\n          </a>\n        </div>\n        <div id=\"footer\">\n            by <a \n              href=\"https://www.chunchunye.com/\" \n              target=\"_blank\" \n              rel=\"noreferrer\">chunchun</a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}